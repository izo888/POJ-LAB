import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Collections; // potrzebne do niemodyfikowalnej mapy

// Główna klasa programu
public class StockMarketSimStage1 {

    public static void main(String[] args) {
        // Tworzymy kilka akcji
        Stock cdr = new Stock("CDR", "CD Projekt Red", 300.0);
        Stock pko = new Stock("PKO", "PKO Bank Polski", 40.0);
        Stock kgh = new Stock("KGH", "KGHM", 120.0);

        // Robimy nowy portfel
        Portfolio mojPortfel = new Portfolio(10000.0); // na start 10000 zł

        // Dodajemy akcje do portfela
        mojPortfel.addStock(cdr, 10);
        mojPortfel.addStock(pko, 50);
        mojPortfel.addStock(kgh, 20);

        // Obliczamy wartość akcji i całego portfela
        double wartoscAkcji = mojPortfel.calculateStockValue();
        double wartoscPortfela = mojPortfel.calculateTotalValue();

        // Wyświetlamy informacje o portfelu
        System.out.println("Stan Portfela"); //Nagłówek 
        System.out.println("Gotówka: " + mojPortfel.getCash() + " PLN"); //Wyświetlamy gotówkę 

        System.out.println("Posiadane akcje:"); //Nagłówek 
        for (Map.Entry<Stock, Integer> entry : mojPortfel.getStocksInPortfolio().entrySet()) { //Pętla po wszystkich akcjach w portfelu
            Stock akcja = entry.getKey();
            int ilosc = entry.getValue();
            double wartoscPozycji = akcja.getInitialPrice() * ilosc;  //liczymy wartość jednej pozycji 
            System.out.println(akcja.getSymbol() + " (" + akcja.getName() + "): " +
                    ilosc + " szt. @ " + akcja.getInitialPrice() + " PLN/szt. = " + wartoscPozycji + " PLN"); //Wyświetlamy dane o akcji 
        }

        System.out.println("Wartość akcji: " + wartoscAkcji + " PLN");  //Wyświetlamy wartość akcji 
        System.out.println("Wartość całkowita portfela: " + wartoscPortfela + " PLN"); //Wyświetlamy wartość portfela 
    }
}

// Klasa reprezentująca akcję
class Stock {
    private String symbol; // Symbol akcji 
    private String name; // Nazwa akcji 
    private double initialPrice; // Cena początkowa 

    // Konstruktor akcji 
    public Stock(String symbol, String name, double initialPrice) {
        this.symbol = symbol;
        this.name = name;
        this.initialPrice = initialPrice;
    }

    // Gettery 
    public String getSymbol() {
        return symbol;
    }

    public String getName() {
        return name;
    }

    public double getInitialPrice() {
        return initialPrice;
    }

    // Nadpisane metody equals() i hashCode()     
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Stock stock = (Stock) o;
        return Objects.equals(symbol, stock.symbol);
    }

    public int hashCode() {
        return Objects.hash(symbol);
    }
}

// Klasa reprezentująca portfel
class Portfolio {
    private double cash; // Gotówka w portfelu 
    private Map<Stock, Integer> stocksInPortfolio; // Akcje w portfelu (akcja i ilość) 

    // Konstruktor portfela 
    public Portfolio(double initialCash) {
        this.cash = initialCash;
        this.stocksInPortfolio = new HashMap<>();
    }

    // Metoda dodawania akcji do portfela 
    public void addStock(Stock stock, int quantity) {
        if (stocksInPortfolio.containsKey(stock)) {
            stocksInPortfolio.put(stock, stocksInPortfolio.get(stock) + quantity);
        } else {
            stocksInPortfolio.put(stock, quantity);
        }
    }

    // Getter gotówki 
    public double getCash() {
        return cash;
    }

    // Getter akcji (zwraca kopię dla bezpieczeństwa) 
    public Map<Stock, Integer> getStocksInPortfolio() {
        return Collections.unmodifiableMap(stocksInPortfolio);
    }

    // Metoda obliczania wartości akcji 
    public double calculateStockValue() {
        double totalValue = 0.0;
        for (Map.Entry<Stock, Integer> entry : stocksInPortfolio.entrySet()) {
            Stock stock = entry.getKey();
            int quantity = entry.getValue();
            totalValue += stock.getInitialPrice() * quantity;
        }
        return totalValue;
    }

    // Metoda obliczania całkowitej wartości portfela 
    public double calculateTotalValue() {
        return cash + calculateStockValue();
    }
}
