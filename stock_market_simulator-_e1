import java.util.HashMap;
import java.util.Map;
import java.util.Collections;

public class Main { // Zmieniamy nazwę klasy głównej na 'Main' (często preferowane przez kompilatory online)

    // Klasa reprezentująca akcję
    static class Stock {  // Dodajemy 'static'
        private String symbol;
        private String name;
        private double initialPrice;

        public Stock(String symbol, String name, double initialPrice) {
            this.symbol = symbol;
            this.name = name;
            this.initialPrice = initialPrice;
        }

        public String getSymbol() {
            return symbol;
        }

        public String getName() {
            return name;
        }

        public double getInitialPrice() {
            return initialPrice;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Stock stock = (Stock) obj;
            return symbol.equals(stock.symbol);
        }

        @Override
        public int hashCode() {
            return symbol.hashCode();
        }
    }

    // Klasa reprezentująca portfel
    static class Portfolio {  // Dodajemy 'static'
        private double cash;
        private Map<Stock, Integer> stocksInPortfolio;

        public Portfolio(double initialCash) {
            this.cash = initialCash;
            this.stocksInPortfolio = new HashMap<>();
        }

        public void addStock(Stock stock, int quantity) {
            if (stocksInPortfolio.containsKey(stock)) {
                stocksInPortfolio.put(stock, stocksInPortfolio.get(stock) + quantity);
            } else {
                stocksInPortfolio.put(stock, quantity);
            }
        }

        public double getCash() {
            return cash;
        }

        public Map<Stock, Integer> getStocksInPortfolio() {
            return Collections.unmodifiableMap(stocksInPortfolio);
        }

        public double calculateStockValue() {
            double totalValue = 0.0;
            for (Map.Entry<Stock, Integer> entry : stocksInPortfolio.entrySet()) {
                totalValue += entry.getValue() * entry.getKey().getInitialPrice();
            }
            return totalValue;
        }

        public double calculateTotalValue() {
            return calculateStockValue() + cash;
        }
    }

    // Główna metoda programu
    public static void main(String[] args) {
        // Tworzenie akcji
        Stock cdr = new Stock("CDR", "CD Projekt", 300.0);
        Stock pko = new Stock("PKO", "PKO BP", 40.0);
        Stock kgh = new Stock("KGH", "KGHM", 120.0);

        // Tworzenie portfela
        Portfolio portfolio = new Portfolio(10000.0);

        // Dodawanie akcji do portfela
        portfolio.addStock(cdr, 10);
        portfolio.addStock(pko, 50);
        portfolio.addStock(kgh, 20);

        // Obliczanie i wyświetlanie informacji o portfelu
        System.out.println("Stan Portfela");
        System.out.println("Gotówka: " + portfolio.getCash() + " PLN");
        System.out.println("Posiadane akcje:");
        for (Map.Entry<Stock, Integer> entry : portfolio.getStocksInPortfolio().entrySet()) {
            Stock stock = entry.getKey();
            int quantity = entry.getValue();
            double stockValue = quantity * stock.getInitialPrice();
            System.out.println(stock.getSymbol() + " (" + stock.getName() + "): " + quantity + " szt. @ "
                    + stock.getInitialPrice() + " PLN/szt. = " + stockValue + " PLN");
        }
        System.out.println("Wartość akcji: " + portfolio.calculateStockValue() + " PLN");
        System.out.println("Wartość całkowita portfela: " + portfolio.calculateTotalValue() + " PLN");
    }
}
