import java.util.HashMap;
import java.util.Map;

// Klasa reprezentująca akcję
class Stock {
    private String symbol;
    private String name;
    private double initialPrice;

    // Konstruktor do tworzenia akcji
    public Stock(String symbol, String name, double initialPrice) {
        this.symbol = symbol;
        this.name = name;
        this.initialPrice = initialPrice;
    }

    // Metoda do pobrania symbolu akcji
    public String getSymbol() {
        return symbol;
    }

    // Metoda do pobrania nazwy akcji
    public String getName() {
        return name;
    }

    // Metoda do pobrania ceny początkowej akcji
    public double getInitialPrice() {
        return initialPrice;
    }

    // Nadpisane metody equals() i hashCode()
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Stock stock = (Stock) obj;
        return symbol.equals(stock.symbol);
    }

    @Override
    public int hashCode() {
        return symbol.hashCode();
    }
}

// Klasa reprezentująca portfel
class Portfolio {
    private double cash;
    private Map<Stock, Integer> stocksInPortfolio;

    // Konstruktor do tworzenia portfela
    public Portfolio(double initialCash) {
        this.cash = initialCash;
        this.stocksInPortfolio = new HashMap<>();
    }

    // Metoda do dodawania akcji do portfela
    public void addStock(Stock stock, int quantity) {
        if (stocksInPortfolio.containsKey(stock)) {
            stocksInPortfolio.put(stock, stocksInPortfolio.get(stock) + quantity);
        } else {
            stocksInPortfolio.put(stock, quantity);
        }
    }

    // Metoda do pobrania gotówki w portfelu
    public double getCash() {
        return cash;
    }

    // Metoda do pobrania mapy akcji w portfelu
    public Map<Stock, Integer> getStocksInPortfolio() {
        return stocksInPortfolio;
    }

    // Metoda do obliczenia wartości akcji w portfelu
    public double calculateStockValue() {
        double totalValue = 0.0;
        for (Map.Entry<Stock, Integer> entry : stocksInPortfolio.entrySet()) {
            totalValue += entry.getValue() * entry.getKey().getInitialPrice();
        }
        return totalValue;
    }

    // Metoda do obliczenia całkowitej wartości portfela
    public double calculateTotalValue() {
        return calculateStockValue() + cash;
    }
}

// Główna klasa programu
public class StockMarketSimStage1 {
    public static void main(String[] args) {
        // Tworzenie akcji
        Stock cdr = new Stock("CDR", "CD Projekt", 300.0);
        Stock pko = new Stock("PKO", "PKO BP", 40.0);
        Stock kgh = new Stock("KGH", "KGHM", 120.0);

        // Tworzenie portfela
        Portfolio portfolio = new Portfolio(10000.0);

        // Dodawanie akcji do portfela
        portfolio.addStock(cdr, 10);
        portfolio.addStock(pko, 50);
        portfolio.addStock(kgh, 20);

        // Obliczanie i wyświetlanie informacji o portfelu
        System.out.println("Stan Portfela");
        System.out.println("Gotówka: " + portfolio.getCash() + " PLN");
        System.out.println("Posiadane akcje:");
        for (Map.Entry<Stock, Integer> entry : portfolio.getStocksInPortfolio().entrySet()) {
            Stock stock = entry.getKey();
            int quantity = entry.getValue();
            double stockValue = quantity * stock.getInitialPrice();
            System.out.println(stock.getSymbol() + " (" + stock.getName() + "): " + quantity + " szt. @ "
                    + stock.getInitialPrice() + " PLN/szt. = " + stockValue + " PLN");
        }
        System.out.println("Wartość akcji: " + portfolio.calculateStockValue() + " PLN");
        System.out.println("Wartość całkowita portfela: " + portfolio.calculateTotalValue() + " PLN");
    }
}
